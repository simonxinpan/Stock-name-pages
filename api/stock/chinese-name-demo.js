// /api/stock/chinese-name.js
// Ëé∑ÂèñËÇ°Á•®ÁöÑ‰∏≠ÊñáÂêçÁß∞ - Ëá™Âä®ÂêåÊ≠•ÁâàÊú¨
// ÊúÄÂêéÊõ¥Êñ∞: 2025-09-13T11:41:53.657Z
// ÊÄªËÆ°: 40 ‰∏™ËÇ°Á•®

import { Pool } from 'pg';

let pool;

// ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•Ê±†
function getPool() {
  if (!pool) {
    const connectionString = process.env.NEON_DATABASE_URL || 
                            process.env.POSTGRES_URL || 
                            process.env.DATABASE_URL;
    
    console.log('üîç [Chinese Name API] Environment variables check:');
    console.log('- NEON_DATABASE_URL:', process.env.NEON_DATABASE_URL ? '‚úÖ Found' : '‚ùå Not found');
    console.log('- POSTGRES_URL:', process.env.POSTGRES_URL ? '‚úÖ Found' : '‚ùå Not found');
    console.log('- DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Found' : '‚ùå Not found');
    
    if (!connectionString) {
      console.error('‚ùå [Chinese Name API] No database connection string found!');
      throw new Error('Database connection string not found');
    }
    
    console.log('‚úÖ [Chinese Name API] Using connection string:', connectionString.substring(0, 20) + '...');
    
    pool = new Pool({
      connectionString,
      ssl: {
        rejectUnauthorized: false
      },
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
    
    pool.on('error', (err) => {
      console.error('‚ùå [Chinese Name API] Database pool error:', err);
    });
  }
  return pool;
}

// ‰ªéNeonÊï∞ÊçÆÂ∫ìÂêåÊ≠•ÁöÑ‰∏≠ÊñáÂêçÁß∞Â≠óÂÖ∏ (40 ‰∏™ËÇ°Á•®)
const localChineseNames = {
  'AAPL': 'ËãπÊûúÂÖ¨Âè∏',
  'ADBE': 'Â••Â§öÊØîÂÖ¨Âè∏',
  'AMZN': '‰∫öÈ©¨ÈÄäÂÖ¨Âè∏',
  'BABA': 'ÈòøÈáåÂ∑¥Â∑¥ÈõÜÂõ¢',
  'BAC': 'ÁæéÂõΩÈì∂Ë°å',
  'BEKE': 'Ë¥ùÂ£≥ÊâæÊàø',
  'BIDU': 'ÁôæÂ∫¶ÂÖ¨Âè∏',
  'BILI': 'ÂìîÂì©ÂìîÂì©',
  'CRM': 'SalesforceÂÖ¨Âè∏',
  'DIDI': 'Êª¥Êª¥Âá∫Ë°å',
  'DIS': 'Ëø™Â£´Â∞ºÂÖ¨Âè∏',
  'EDU': 'Êñ∞‰∏úÊñπÊïôËÇ≤',
  'GOOGL': 'Ë∞∑Ê≠åÂÖ¨Âè∏',
  'HD': 'ÂÆ∂ÂæóÂÆùÂÖ¨Âè∏',
  'IQ': 'Áà±Â•áËâ∫',
  'JD': '‰∫¨‰∏úÈõÜÂõ¢',
  'JNJ': 'Âº∫ÁîüÂÖ¨Âè∏',
  'JPM': 'Êë©Ê†πÂ§ßÈÄöÈì∂Ë°å',
  'LI': 'ÁêÜÊÉ≥Ê±ΩËΩ¶',
  'MA': '‰∏á‰∫ãËææÂç°ÂÖ¨Âè∏',
  'META': 'MetaÂπ≥Âè∞ÂÖ¨Âè∏',
  'MSFT': 'ÂæÆËΩØÂÖ¨Âè∏',
  'NFLX': 'Â•àÈ£ûÂÖ¨Âè∏',
  'NIO': 'ËîöÊù•Ê±ΩËΩ¶',
  'NTES': 'ÁΩëÊòìÂÖ¨Âè∏',
  'NVDA': 'Ëã±‰ºüËææÂÖ¨Âè∏',
  'PDD': 'ÊãºÂ§öÂ§ö',
  'PG': 'ÂÆùÊ¥ÅÂÖ¨Âè∏',
  'SINA': 'Êñ∞Êµ™ÂÖ¨Âè∏',
  'TAL': 'Â•ΩÊú™Êù•ÊïôËÇ≤',
  'TME': 'ËÖæËÆØÈü≥‰πê',
  'TSLA': 'ÁâπÊñØÊãâÂÖ¨Âè∏',
  'UNH': 'ËÅîÂêàÂÅ•Â∫∑ÈõÜÂõ¢',
  'V': 'Áª¥Ëê®ÂÖ¨Âè∏',
  'VIPS': 'ÂîØÂìÅ‰ºö',
  'WB': 'ÂæÆÂçö',
  'XOM': 'ÂüÉÂÖãÊ£ÆÁæéÂ≠öÂÖ¨Âè∏',
  'XPEV': 'Â∞èÈπèÊ±ΩËΩ¶',
  'YMM': 'Êª°Â∏ÆÈõÜÂõ¢',
  'ZTO': '‰∏≠ÈÄöÂø´ÈÄí',
};

export default async function handler(request, response) {
  // ËÆæÁΩÆCORSÂ§¥
  response.setHeader('Access-Control-Allow-Origin', '*');
  response.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  response.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (request.method === 'OPTIONS') {
    response.writeHead(200, { 'Content-Type': 'text/plain' });
    response.end();
    return;
  }
  
  if (request.method !== 'GET') {
    response.writeHead(405, { 'Content-Type': 'application/json' });
    return response.end(JSON.stringify({ error: 'Method not allowed' }));
  }

  const { symbol } = request.query;
  if (!symbol) {
    response.writeHead(400, { 'Content-Type': 'application/json' });
    return response.end(JSON.stringify({ error: 'Stock symbol is required' }));
  }

  const upperSymbol = symbol.toUpperCase();
  
  try {
    console.log(`üîç [Chinese Name API] Querying for symbol: ${upperSymbol}`);
    
    // È¶ñÂÖàÊ£ÄÊü•Êú¨Âú∞Â≠óÂÖ∏
    if (localChineseNames[upperSymbol]) {
      console.log(`‚úÖ [Chinese Name API] Found in local dictionary: ${localChineseNames[upperSymbol]}`);
      response.writeHead(200, { 'Content-Type': 'application/json' });
      return response.end(JSON.stringify({
        symbol: upperSymbol,
        chineseName: localChineseNames[upperSymbol],
        source: 'local_dictionary',
        lastUpdated: '2025-09-13T11:41:53.657Z'
      }));
    }
    
    // Â¶ÇÊûúÊú¨Âú∞Â≠óÂÖ∏Ê≤°ÊúâÔºåÂ∞ùËØïÊï∞ÊçÆÂ∫ìÊü•ËØ¢
    const dbPool = getPool();
    const queries = [
      'SELECT ticker, company_name, chinese_name FROM stocks WHERE ticker = $1',
      'SELECT ticker, company_name, name_zh FROM stocks WHERE ticker = $1',
      'SELECT symbol, company_name, chinese_name FROM stocks WHERE symbol = $1',
      'SELECT symbol, company_name, name_zh FROM stocks WHERE symbol = $1'
    ];
    
    let result = null;
    for (const query of queries) {
      try {
        result = await dbPool.query(query, [upperSymbol]);
        if (result.rows.length > 0) break;
      } catch (queryError) {
        continue;
      }
    }
    
    if (result && result.rows.length > 0) {
      const stock = result.rows[0];
      const chineseName = stock.chinese_name || stock.name_zh || stock.company_name;
      
      response.writeHead(200, { 'Content-Type': 'application/json' });
      response.end(JSON.stringify({
        symbol: stock.ticker || stock.symbol,
        chineseName: chineseName,
        source: 'database',
        lastUpdated: new Date().toISOString()
      }));
    } else {
      console.log(`‚ö†Ô∏è [Chinese Name API] No Chinese name found for: ${upperSymbol}`);
      response.writeHead(404, { 'Content-Type': 'application/json' });
      response.end(JSON.stringify({
        symbol: upperSymbol,
        error: 'Chinese name not found',
        source: 'not_found'
      }));
    }
    
  } catch (error) {
    console.error(`‚ùå [Chinese Name API] Error for ${upperSymbol}:`, error);
    response.writeHead(500, { 'Content-Type': 'application/json' });
    response.end(JSON.stringify({
      symbol: upperSymbol,
      error: 'Internal server error',
      details: error.message
    }));
  }
}