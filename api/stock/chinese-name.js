// /api/stock/chinese-name.js
// Ëé∑ÂèñËÇ°Á•®ÁöÑ‰∏≠ÊñáÂêçÁß∞

import { Pool } from 'pg';

let pool;

// ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•Ê±†
function getPool() {
  if (!pool) {
    // Â∞ùËØïÂ§ö‰∏™ÂèØËÉΩÁöÑÁéØÂ¢ÉÂèòÈáèÂêç
    const connectionString = process.env.NEON_DATABASE_URL || 
                            process.env.POSTGRES_URL || 
                            process.env.DATABASE_URL;
    
    console.log('üîç [Chinese Name API] Environment variables check:');
    console.log('- NEON_DATABASE_URL:', process.env.NEON_DATABASE_URL ? '‚úÖ Found' : '‚ùå Not found');
    console.log('- POSTGRES_URL:', process.env.POSTGRES_URL ? '‚úÖ Found' : '‚ùå Not found');
    console.log('- DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Found' : '‚ùå Not found');
    
    if (!connectionString) {
      console.error('‚ùå [Chinese Name API] No database connection string found!');
      throw new Error('Database connection string not found');
    }
    
    console.log('‚úÖ [Chinese Name API] Using connection string:', connectionString.substring(0, 20) + '...');
    
    pool = new Pool({
      connectionString,
      ssl: {
        rejectUnauthorized: false
      },
      // Ê∑ªÂä†ËøûÊé•Ê±†ÈÖçÁΩÆ
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });
    
    // ÊµãËØïËøûÊé•
    pool.on('error', (err) => {
      console.error('‚ùå [Chinese Name API] Database pool error:', err);
    });
  }
  return pool;
}

// Êú¨Âú∞‰∏≠ÊñáÂêçÁß∞Â≠óÂÖ∏ (‰Ωú‰∏∫Êï∞ÊçÆÂ∫ìÁöÑÂ§áÁî®ÊñπÊ°à)
const localChineseNames = {
  'AAPL': 'ËãπÊûúÂÖ¨Âè∏',
  'MSFT': 'ÂæÆËΩØÂÖ¨Âè∏',
  'GOOGL': 'Ë∞∑Ê≠åÂÖ¨Âè∏',
  'GOOG': 'Ë∞∑Ê≠åÂÖ¨Âè∏',
  'TSLA': 'ÁâπÊñØÊãâÂÖ¨Âè∏',
  'NVDA': 'Ëã±‰ºüËææÂÖ¨Âè∏',
  'AMZN': '‰∫öÈ©¨ÈÄäÂÖ¨Âè∏',
  'BRK.B': '‰ºØÂÖãÂ∏åÂ∞îÂìàÊííÈü¶ÂÖ¨Âè∏',
  'BRK-B': '‰ºØÂÖãÂ∏åÂ∞îÂìàÊííÈü¶ÂÖ¨Âè∏',
  'META': 'MetaÂÖ¨Âè∏',
  'NFLX': 'Â•àÈ£ûÂÖ¨Âè∏',
  'BABA': 'ÈòøÈáåÂ∑¥Â∑¥ÈõÜÂõ¢',
  'JPM': 'Êë©Ê†πÂ§ßÈÄö',
  'JNJ': 'Âº∫ÁîüÂÖ¨Âè∏',
  'V': 'VisaÂÖ¨Âè∏',
  'PG': 'ÂÆùÊ¥ÅÂÖ¨Âè∏',
  'UNH': 'ËÅîÂêàÂÅ•Â∫∑ÈõÜÂõ¢',
  'HD': 'ÂÆ∂ÂæóÂÆù',
  'MA': '‰∏á‰∫ãËææÂç°',
  'BAC': 'ÁæéÂõΩÈì∂Ë°å',
  'PFE': 'ËæâÁëûÂÖ¨Âè∏',
  'XOM': 'ÂüÉÂÖãÊ£ÆÁæéÂ≠ö',
  // Êñ∞Â¢ûÁÉ≠Èó®ËÇ°Á•®
  'BLK': 'Ë¥ùËé±Âæ∑ÈõÜÂõ¢',
  'AXP': 'ÁæéÂõΩËøêÈÄö',
  'ORCL': 'Áî≤È™®ÊñáÂÖ¨Âè∏',
  'WMT': 'Ê≤ÉÂ∞îÁéõ',
  'KO': 'ÂèØÂè£ÂèØ‰πêÂÖ¨Âè∏',
  'DIS': 'Ëø™Â£´Â∞ºÂÖ¨Âè∏',
  'ADBE': 'Â••Â§öÊØîÂÖ¨Âè∏',
  'CRM': 'SalesforceÂÖ¨Âè∏',
  'NFLX': 'Â•àÈ£ûÂÖ¨Âè∏',
  'PYPL': 'PayPalÂÖ¨Âè∏',
  'INTC': 'Ëã±ÁâπÂ∞îÂÖ¨Âè∏',
  'AMD': 'Ë∂ÖÂ®ÅÂçäÂØº‰Ωì',
  'QCOM': 'È´òÈÄöÂÖ¨Âè∏',
  'IBM': 'IBMÂÖ¨Âè∏',
  'GS': 'È´òÁõõÈõÜÂõ¢',
  'MS': 'Êë©Ê†πÂ£´‰∏πÂà©',
  'WFC': 'ÂØåÂõΩÈì∂Ë°å',
  'C': 'Ëä±ÊóóÈõÜÂõ¢',
  'USB': 'ÁæéÂõΩÂêà‰ºóÈì∂Ë°å',
  'TRV': 'ÊóÖË°åËÄÖÈõÜÂõ¢',
  'MMM': '3MÂÖ¨Âè∏',
  'CAT': 'Âç°ÁâπÂΩºÂãíÂÖ¨Âè∏',
  'BA': 'Ê≥¢Èü≥ÂÖ¨Âè∏',
  'GE': 'ÈÄöÁî®ÁîµÊ∞î',
  'F': 'Á¶èÁâπÊ±ΩËΩ¶',
  'GM': 'ÈÄöÁî®Ê±ΩËΩ¶',
  'T': 'AT&TÂÖ¨Âè∏',
  'VZ': 'Â®ÅÁëûÊ£ÆÈÄö‰ø°',
  'CVX': 'Èõ™‰ΩõÈæôÂÖ¨Âè∏',
  'COP': 'Â∫∑Ëè≤Áü≥Ê≤π',
  'MRK': 'ÈªòÂÖãÂÖ¨Âè∏',
  'ABBV': 'Ëâæ‰ºØÁª¥ÂÖ¨Âè∏',
  'LLY': 'Á§ºÊù•ÂÖ¨Âè∏',
  'TMO': 'ËµõÈªòÈ£û‰∏ñÂ∞î',
  'ABT': 'ÈõÖÂüπÂÖ¨Âè∏',
  'MDT': 'ÁæéÊï¶ÂäõÂÖ¨Âè∏',
  'DHR': '‰∏πÁ∫≥Ëµ´ÂÖ¨Âè∏',
  'BMY': 'ÁôæÊó∂ÁæéÊñΩË¥µÂÆù',
  'AMGN': 'ÂÆâËøõÂÖ¨Âè∏',
  'GILD': 'ÂêâÂà©Âæ∑ÁßëÂ≠¶',
  'COST': 'Â•ΩÂ∏ÇÂ§ö',
  'TGT': 'Â°îÂêâÁâπÂÖ¨Âè∏',
  'LOW': 'Âä≥Ê∞èÂÖ¨Âè∏',
  'SBUX': 'ÊòüÂ∑¥ÂÖãÂÖ¨Âè∏',
  'MCD': 'È∫¶ÂΩìÂä≥ÂÖ¨Âè∏',
  'NKE': 'ËÄêÂÖãÂÖ¨Âè∏',
  'UPS': 'ËÅîÂêàÂåÖË£π',
  'FDX': 'ËÅîÈÇ¶Âø´ÈÄí',
  'HON': 'ÈúçÂ∞ºÈü¶Â∞î',
  'LMT': 'Ê¥õÂÖãÂ∏åÂæ∑È©¨‰∏Å',
  'RTX': 'Èõ∑Á•ûÊäÄÊúØ',
  'NOC': 'ËØ∫ÊñØÁΩóÊôÆÊ†ºÈ≤ÅÊõº',
  'SPY': 'Ê†áÊôÆ500ETF',
  'QQQ': 'Á∫≥ÊñØËææÂÖã100ETF',
  'IWM': 'ÁΩóÁ¥†2000ETF',
  'VTI': 'ÂÖ®Â∏ÇÂú∫ETF',
  'VOO': 'Ê†áÊôÆ500ETF'
};

export default async function handler(request, response) {
  // ËÆæÁΩÆCORSÂ§¥
  response.setHeader('Access-Control-Allow-Origin', '*');
  response.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  response.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (request.method === 'OPTIONS') {
    response.writeHead(200, { 'Content-Type': 'text/plain' });
    response.end();
    return;
  }
  
  if (request.method !== 'GET') {
    response.writeHead(405, { 'Content-Type': 'application/json' });
    return response.end(JSON.stringify({ error: 'Method not allowed' }));
  }

  const { symbol } = request.query;
  if (!symbol) {
    response.writeHead(400, { 'Content-Type': 'application/json' });
    return response.end(JSON.stringify({ error: 'Stock symbol is required' }));
  }

  const upperSymbol = symbol.toUpperCase();
  
  try {
    console.log(`üîç [Chinese Name API] Querying database for symbol: ${upperSymbol}`);
    
    // È¶ñÂÖàÂ∞ùËØïÊï∞ÊçÆÂ∫ìÊü•ËØ¢
    const dbPool = getPool();
    
    // Â∞ùËØïÂ§ö‰∏™ÂèØËÉΩÁöÑË°®ÂêçÂíåÂàóÂêçÁªÑÂêà
    const queries = [
      'SELECT ticker, company_name, chinese_name FROM stocks WHERE ticker = $1',
      'SELECT ticker, company_name, name_zh FROM stocks WHERE ticker = $1',
      'SELECT ticker, name, chinese_name FROM stocks WHERE ticker = $1',
      'SELECT ticker, name, name_zh FROM stocks WHERE ticker = $1',
      // Â§áÁî®Êü•ËØ¢Ôºå‰ª•Èò≤ÂàóÂêçÁ°ÆÂÆûÊòØsymbol
      'SELECT symbol, company_name, chinese_name FROM stocks WHERE symbol = $1',
      'SELECT symbol, company_name, name_zh FROM stocks WHERE symbol = $1',
      'SELECT symbol, name, chinese_name FROM stocks WHERE symbol = $1',
      'SELECT symbol, name, name_zh FROM stocks WHERE symbol = $1'
    ];
    
    let result = null;
    let usedQuery = '';
    
    for (const query of queries) {
      try {
        console.log(`üîç [Chinese Name API] Trying query: ${query}`);
        result = await dbPool.query(query, [upperSymbol]);
        usedQuery = query;
        console.log(`‚úÖ [Chinese Name API] Query successful, found ${result.rows.length} rows`);
        break;
      } catch (queryError) {
        console.log(`‚ùå [Chinese Name API] Query failed: ${queryError.message}`);
        continue;
      }
    }
    
    if (result && result.rows.length > 0) {
      const stock = result.rows[0];
      console.log(`‚úÖ [Chinese Name API] Found stock data:`, stock);
      
      // Êô∫ËÉΩËé∑Âèñ‰∏≠ÊñáÂêçÁß∞Â≠óÊÆµ
      const chineseName = stock.chinese_name || stock.name_zh || stock.company_name || stock.name;
      
      response.writeHead(200, { 'Content-Type': 'application/json' });
      response.end(JSON.stringify({
        symbol: stock.ticker || stock.symbol,
        company_name: stock.company_name || stock.name,
        chinese_name: chineseName,
        success: true,
        source: 'database',
        query_used: usedQuery
      }));
      return;
    } else {
      console.log(`‚ùå [Chinese Name API] No data found in database for symbol: ${upperSymbol}`);
    }
  } catch (error) {
    console.error(`‚ùå [Chinese Name API] Database error for ${upperSymbol}:`, error.message);
    console.error('Full error:', error);
  }
  
  // Êï∞ÊçÆÂ∫ìÊü•ËØ¢Â§±Ë¥•ÊàñÊó†ÁªìÊûúÊó∂Ôºå‰ΩøÁî®Êú¨Âú∞Â≠óÂÖ∏
  console.log(`üîÑ [Chinese Name API] Falling back to local dictionary for: ${upperSymbol}`);
  const chineseName = localChineseNames[upperSymbol];
  
  if (chineseName) {
    console.log(`‚úÖ [Chinese Name API] Found in local dictionary: ${upperSymbol} -> ${chineseName}`);
    response.writeHead(200, { 'Content-Type': 'application/json' });
    response.end(JSON.stringify({
      symbol: upperSymbol,
      company_name: null,
      chinese_name: chineseName,
      success: true,
      source: 'local'
    }));
  } else {
    console.log(`‚ùå [Chinese Name API] Not found in local dictionary: ${upperSymbol}`);
    console.log(`üìù [Chinese Name API] Available symbols in local dictionary:`, Object.keys(localChineseNames));
    response.writeHead(404, { 'Content-Type': 'application/json' });
    response.end(JSON.stringify({ 
      error: `No Chinese name found for symbol: ${symbol}`,
      symbol: upperSymbol,
      chinese_name: null,
      company_name: null,
      success: false
    }));
  }
}